#! /bin/sh
### BEGIN INIT INFO
# Provides:          yhsm-yubikey-ksm
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: YubiHSM key storage module
# Description:       Key storage module for YubiKey OTP validation
#                    using the YubiHSM.
### END INIT INFO

# Author: Fredrik Thulin <fredrik@yubico.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="YubiHSM YubiKey KSM"
NAME=yhsm-yubikey-ksm
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DAEMON_ARGS="--pid-file $PIDFILE"
RUNASUSER="yhsm-ksmsrv"
PROCESS_EXECUTABLE="/usr/bin/python"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

if [ -r /etc/default/$NAME ]; then
    case "x$YHSM_KSM_ENABLE" in
	xtrue|xfalse)
	    ;;
	*)
	    log_failure_msg "YHSM_KSM_ENABLE must be set to either 'true' or 'false'"
	    exit 1
    esac

    if [ "x$YHSM_KSM_ENABLE" = "true" ]; then
	if [ "x$YHSM_KSM_KEYHANDLES" = "x" ]; then
	    log_failure_msg "YHSM_KSM_KEYHANDLES not specified in /etc/default/$NAME"
	    exit 1
	fi
    fi
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# make the user we run our daemon as able to write the pidfile
	touch $PIDFILE
	chown $RUNASUSER $PIDFILE
	chmod 664 $PIDFILE

	if [ "x$YHSM_KSM_UNLOCK_PASSPHRASE" != "x" ]; then
	    log_daemon_msg "Unlocking YubiHSM key store" "$NAME"
	    echo "$YHSM_KSM_UNLOCK_PASSPHRASE" | /usr/sbin/yhsm-keystore-unlock --stdin --no-otp --device "$YHSM_KSM_DEVICE"
	    if [ $? -ne 0 ]; then
		log_failure_msg "Failed unlocking YubiHSM key store"
		return 2
	    fi
	fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $PROCESS_EXECUTABLE --test -c $RUNASUSER > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -c $RUNASUSER --background -- \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --exec $PROCESS_EXECUTABLE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	if [ "x$YHSM_KSM_ENABLE" != "x" ]; then
	    if [ "x$YHSM_KSM_ENABLE" != "xtrue" ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "NOT starting $DESC (disabled in /etc/default/$NAME)"
		exit 0
	    fi
	fi
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
