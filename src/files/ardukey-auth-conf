#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ArduKey authserver configuration tool
@author Bastian Raschke <bastian.raschke@posteo.de>

Copyright 2015 Bastian Raschke
All rights reserved.
"""

import os
import sys
import traceback
import re
import string, random
import argparse

from ardukeyauth import __version__ as VERSION
from ardukeyauth.configreader import ConfigReader
from ardukeyauth.sqlitewrapper import SQLiteWrapper


def listArduKeys():
        """
        Lists all available ArduKeys.

        @return boolean
        """

        ## TODO

        return True

def addArduKey(publicId, secretId, aesKey):
        """
        Adds a ArduKey.

        @param string publicId
        The public id of ArduKey.

        @param string secretId
        The secret id of ArduKey.

        @param string aesKey
        The AES key as hexadecimal string.

        @return boolean
        """

        publicId = publicId.lower()
        publicIdRegexMatch = re.match('^([cbdefghijklnrtuv]{12})$', publicId)

        if ( publicIdRegexMatch == None ):
            sys.stderr.write('Error: The given public id "' + publicId + '" is not valid!\n')
            return False

        secretId = secretId.lower()
        secretIdRegexMatch = re.match('^([0123456789abcdef]{12})$', secretId)

        if ( secretIdRegexMatch == None ):
            sys.stderr.write('Error: The given secret id "' + secretId + '" is not valid!\n')
            return False

        aesKey = secretId.lower()
        aesKeyRegexMatch = re.match('^([0123456789abcdef]{32})$', aesKey)

        if ( secretIdRegexMatch == None ):
            sys.stderr.write('Error: The given AES key "' + aesKey + '" is not valid!\n')
            return False

        try:
            SQLiteWrapper.getInstance().cursor.execute(
                '''
                SELECT publicid
                FROM ARDUKEY
                WHERE publicid = ?
                ''', [
                publicId,
            ])

            rows = SQLiteWrapper.getInstance().cursor.fetchall()

            if ( len(rows) > 0 ):
                sys.stderr.write('Error: The ArduKey "' + publicId + '" already exists!\n')
                return False

            SQLiteWrapper.getInstance().cursor.execute(
                '''
                INSERT INTO ARDUKEY(publicid, secretid, aeskey, created)
                VALUES(?, ?, ?, DATETIME());
                ''', [
                publicId,
                secretId,
                aesKey,
            ])
            SQLiteWrapper.getInstance().connection.commit()

        except:
            sys.stderr.write('Error: The ArduKey could not be created!\n')
            sys.stderr.write('The database operation failed!\n\n')
            sys.stderr.write('Stacktrace:\n\n' + traceback.format_exc())
            return False

        print('The ArduKey has been created successfully.')
        return True

def revokeArduKey(publicId):
        """
        Revokes a ArduKey.

        @param string publicId
        The public id of ArduKey.

        @return boolean
        """

        publicId = publicId.lower()
        publicIdRegexMatch = re.match('^([cbdefghijklnrtuv]{12})$', publicId)

        if ( publicIdRegexMatch == None ):
            sys.stderr.write('Error: The given public id "' + publicId + '" is not valid!\n')
            return False

        try:
            SQLiteWrapper.getInstance().cursor.execute(
                '''
                SELECT enabled
                FROM ARDUKEY
                WHERE publicid = ?
                ''', [
                publicId,
            ])

            rows = SQLiteWrapper.getInstance().cursor.fetchall()

            if ( len(rows) == 0 ):
                sys.stderr.write('Error: The ArduKey "' + publicId + '" does not exists!\n')
                return False

            enabled = rows[0][0]

            if ( enabled == 0 ):
                sys.stderr.write('Error: The ArduKey "' + publicId + '" is still revoked!\n')
                return False

            SQLiteWrapper.getInstance().cursor.execute(
                '''
                UPDATE ARDUKEY
                SET enabled = 0
                WHERE publicid = ?
                ''', [
                publicId,
            ])
            SQLiteWrapper.getInstance().connection.commit()

        except:
            sys.stderr.write('Error: The ArduKey could not be revoked!\n')
            sys.stderr.write('The database operation failed!\n\n')
            sys.stderr.write('Stacktrace:\n\n' + traceback.format_exc())
            return False

        print('The ArduKey has been revoked successfully.')
        return True

def listAPIKeys():
        """
        Lists all available API keys.

        @return boolean
        """

        ## TODO

        return True

def generateAPIKey():
        """
        Generates a new API key.

        @return boolean
        """

        ## See https://stackoverflow.com/questions/2257441/
        sharedSecret = ''.join(random.SystemRandom().choice(
            string.ascii_uppercase + string.digits) for _ in range(64))

        try:
            SQLiteWrapper.getInstance().cursor.execute(
                '''
                INSERT INTO API(secret, created)
                VALUES(?, DATETIME());
                ''', [
                sharedSecret,
            ])
            SQLiteWrapper.getInstance().connection.commit()

            lastRowId = SQLiteWrapper.getInstance().cursor.lastrowid

        except:
            sys.stderr.write('Error: The API key could not be generated!\n')
            sys.stderr.write('The database operation failed!\n\n')
            sys.stderr.write('Stacktrace:\n\n' + traceback.format_exc())
            return False

        print('The API key has been generated successfully.')
        print('API id:        ' + str(lastRowId))
        print('Shared secret: ' + sharedSecret)
        return True

def revokeAPIKey(apiId):
        """
        Revokes a API key.

        @param string apiId
        The id of the API key.

        @return boolean
        """

        if ( type(apiId) != int ):
            sys.stderr.write('Error: The given API id "' + apiId + '" is not valid!\n')
            return False

        try:
            SQLiteWrapper.getInstance().cursor.execute(
                '''
                SELECT enabled
                FROM API
                WHERE id = ?
                ''', [
                apiId,
            ])

            rows = SQLiteWrapper.getInstance().cursor.fetchall()

            if ( len(rows) == 0 ):
                sys.stderr.write('Error: The API key "' + str(apiId) + '" does not exists!\n')
                return False

            enabled = rows[0][0]

            if ( enabled == 0 ):
                sys.stderr.write('Error: The API key "' + str(apiId) + '" is still revoked!\n')
                return False

            SQLiteWrapper.getInstance().cursor.execute(
                '''
                UPDATE API
                SET enabled = 0
                WHERE id = ?
                ''', [
                apiId,
            ])
            SQLiteWrapper.getInstance().connection.commit()

        except:
            sys.stderr.write('Error: The API key could not be revoked!\n')
            sys.stderr.write('The database operation failed!\n\n')
            sys.stderr.write('Stacktrace:\n\n' + traceback.format_exc())
            return False

        print('The API key has been revoked successfully.')
        return True


if ( __name__ == '__main__' ):

    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        sys.stderr.write('Error: You need to have root privileges!\n')
        sys.exit(1)

    ## Try to parse configuration file
    try:
        configReader = ConfigReader()

    except:
        sys.stderr.write('Error: The config file could not be read correctly!\n\n')
        sys.stderr.write('Stacktrace:\n\n' + traceback.format_exc())
        exit(1)

    parser = argparse.ArgumentParser(
        description='ArduKey authserver configuration tool ' + VERSION)

    parser.add_argument('-l', '--list-ardukeys',
                        action='store_true',
                        default=False,
                        required=False,
                        help='Lists all available ArduKeys.'
                       )

    parser.add_argument('-a', '--add-ardukey',
                        action='store',
                        default=False,
                        required=False,
                        nargs=3,
                        metavar=('<publicId>', '<secretId>', '<aesKey>'),
                        help='Adds a new ArduKey.'
                       )

    parser.add_argument('-r', '--revoke-ardukey',
                        action='store',
                        default=False,
                        required=False,
                        nargs=1,
                        metavar='<publicId>',
                        type=str,
                        help='Revokes a ArduKey.'
                       )

    parser.add_argument('--list-apikeys',
                        action='store_true',
                        default=False,
                        required=False,
                        help='Lists all available API keys.'
                       )

    parser.add_argument('--generate-apikey',
                        action='store_true',
                        default=False,
                        required=False,
                        help='Generates a new API key.'
                       )

    parser.add_argument('--revoke-apikey',
                        action='store',
                        default=False,
                        required=False,
                        nargs=1,
                        metavar='<apiId>',
                        type=int,
                        help='Revokes an API key.'
                       )

    parser.add_argument('-v', '--version',
                        action='version',
                        version='ArduKey authserver configuration tool ' + VERSION,
                        help='Prints version and exits.'
                       )

    args = vars(parser.parse_args())

    if ( args['list_ardukeys'] ):
        listArduKeys()

    elif ( args['add_ardukey'] ):
        publicId = args['add_ardukey'][0]
        secretId = args['add_ardukey'][0]
        aesKey = args['add_ardukey'][0]
        addArduKey(publicId, secretId, aesKey)

    elif ( args['revoke_ardukey'] ):
        publicId = args['revoke_ardukey'][0]
        revokeArduKey(publicId)

    elif ( args['list_apikeys'] ):
        listAPIKeys()

    elif ( args['generate_apikey'] ):
        generateAPIKey()

    elif ( args['revoke_apikey'] ):
        apiId = args['revoke_apikey'][0]
        revokeAPIKey(apiId)

    else:
        parser.print_help()
