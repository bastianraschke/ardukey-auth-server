#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ArduKey auth-server configuration tool

Copyright 2015 Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import os
import sys
import traceback
import re
import string, random
import argparse

import ardukeyauth.configuration as configuration
import ardukeyauth.sqlitewrapper as sqlitewrapper

from ardukeyauth import __version__ as VERSION


def listArduKeys():
    """
    List all available ArduKeys.

    @return bool
    """

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT publicid, secretid, counter, sessioncounter, timestamp, aeskey,
                   modified, created, enabled
            FROM ARDUKEY
            ORDER BY created ASC
            ''', [
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) == 0 ):
            print('No available ArduKeys found!\n')
            return True

        ## Table listing approach - thanks to user "9000"
        ## see https://stackoverflow.com/questions/5084743
        tableFormat = '{0:12} | {1:12} | {2:7} | {3:15} | {4:9} | {5:32} | {6:19} | {7:19} | {8:7}'

        ## Print table header
        print(tableFormat.format('Public ID', 'Secret ID', 'Counter',
            'Session counter', 'Timestamp', 'AES key', 'Modified', 'Created', 'Enabled'))

        ## Print table data rows
        for row in rows:
            print(tableFormat.format(*row))

    except:
        sys.stderr.write('Error: The ArduKeys could not be listed!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    return True

def addArduKey(publicId, secretId, aesKey):
    """
    Add a new ArduKey.

    @param str publicId
    The public id of ArduKey.

    @param str secretId
    The secret id of ArduKey.

    @param str aesKey
    The AES key as hexadecimal string.

    @return bool
    """

    publicId = publicId.lower()
    publicIdRegexMatch = re.match('^([cbdefghijklnrtuv]{12})$', publicId)

    if ( publicIdRegexMatch == None ):
        sys.stderr.write('Error: The given public id "' + publicId + '" is not valid!\n')
        return False

    secretId = secretId.lower()
    secretIdRegexMatch = re.match('^([0123456789abcdef]{12})$', secretId)

    if ( secretIdRegexMatch == None ):
        sys.stderr.write('Error: The given secret id "' + secretId + '" is not valid!\n')
        return False

    aesKey = aesKey.lower()
    aesKeyRegexMatch = re.match('^([0123456789abcdef]{32})$', aesKey)

    if ( secretIdRegexMatch == None ):
        sys.stderr.write('Error: The given AES key "' + aesKey + '" is not valid!\n')
        return False

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT publicid
            FROM ARDUKEY
            WHERE publicid = ?
            ''', [
            publicId,
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) > 0 ):
            sys.stderr.write('Error: The ArduKey "' + publicId + '" already exists!\n')
            return False

        sqlitewrapper.getInstance().cursor.execute(
            '''
            INSERT INTO ARDUKEY(publicid, secretid, aeskey)
            VALUES(?, ?, ?);
            ''', [
            publicId,
            secretId,
            aesKey,
        ])
        sqlitewrapper.getInstance().connection.commit()

    except:
        sys.stderr.write('Error: The ArduKey could not be created!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    print('The ArduKey has been created successfully.')
    return True

def revokeArduKey(publicId):
    """
    Revoke an ArduKey.

    @param str publicId
    The public id of ArduKey.

    @return bool
    """

    publicId = publicId.lower()
    publicIdRegexMatch = re.match('^([cbdefghijklnrtuv]{12})$', publicId)

    if ( publicIdRegexMatch == None ):
        sys.stderr.write('Error: The given public id "' + publicId + '" is not valid!\n')
        return False

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT enabled
            FROM ARDUKEY
            WHERE publicid = ?
            ''', [
            publicId,
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) == 0 ):
            sys.stderr.write('Error: The ArduKey "' + publicId + '" does not exists!\n')
            return False

        enabled = rows[0][0]

        if ( enabled == 0 ):
            sys.stderr.write('Error: The ArduKey "' + publicId + '" is still revoked!\n')
            return False

        sqlitewrapper.getInstance().cursor.execute(
            '''
            UPDATE ARDUKEY
            SET enabled = 0
            WHERE publicid = ?
            ''', [
            publicId,
        ])
        sqlitewrapper.getInstance().connection.commit()

    except:
        sys.stderr.write('Error: The ArduKey could not be revoked!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    print('The ArduKey has been revoked successfully.')
    return True

def deleteArduKey(publicId):
    """
    Delete an ArduKey.

    @param str publicId
    The public id of ArduKey.

    @return bool
    """

    publicId = publicId.lower()
    publicIdRegexMatch = re.match('^([cbdefghijklnrtuv]{12})$', publicId)

    if ( publicIdRegexMatch == None ):
        sys.stderr.write('Error: The given public id "' + publicId + '" is not valid!\n')
        return False

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT publicid
            FROM ARDUKEY
            WHERE publicid = ?
            ''', [
            publicId,
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) == 0 ):
            sys.stderr.write('Error: The ArduKey "' + publicId + '" does not exists!\n')
            return False

        sqlitewrapper.getInstance().cursor.execute(
            '''
            DELETE FROM ARDUKEY
            WHERE publicid = ?
            ''', [
            publicId,
        ])
        sqlitewrapper.getInstance().connection.commit()

    except:
        sys.stderr.write('Error: The ArduKey could not be deleted!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    print('The ArduKey has been deleted successfully.')
    return True

def listAPIKeys():
    """
    List all available API keys.

    @return bool
    """

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT id, secret, modified, created, enabled
            FROM API
            ORDER BY created ASC
            ''', [
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) == 0 ):
            print('No available API keys found!\n')
            return True

        tableFormat = '{0:6} | {1:64} | {2:19} | {3:19} | {4:7}'

        ## Print table header
        print(tableFormat.format('API ID', 'Shared secret', 'Modified', 'Created', 'Enabled'))

        ## Print table data rows
        for row in rows:
            print(tableFormat.format(*row))

    except:
        sys.stderr.write('Error: The ArduKeys could not be listed!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    return True

def generateAPIKey():
    """
    Generate a new API key.

    @return bool
    """

    ## See https://stackoverflow.com/questions/2257441/
    sharedSecret = ''.join(random.SystemRandom().choice(
        string.ascii_uppercase + string.digits) for _ in range(64))

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            INSERT INTO API(secret)
            VALUES(?);
            ''', [
            sharedSecret,
        ])
        sqlitewrapper.getInstance().connection.commit()

        lastRowId = sqlitewrapper.getInstance().cursor.lastrowid

    except:
        sys.stderr.write('Error: The API key could not be generated!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    print('The API key has been generated successfully.')
    print('API id:        ' + str(lastRowId))
    print('Shared secret: ' + sharedSecret)
    return True

def revokeAPIKey(apiId):
    """
    Revoke an API key.

    @param str apiId
    The id of the API key.

    @return bool
    """

    if ( type(apiId) != int ):
        sys.stderr.write('Error: The given API id "' + apiId + '" is not valid!\n')
        return False

    try:
        sqlitewrapper.getInstance().cursor.execute(
            '''
            SELECT enabled
            FROM API
            WHERE id = ?
            ''', [
            apiId,
        ])

        rows = sqlitewrapper.getInstance().cursor.fetchall()

        if ( len(rows) == 0 ):
            sys.stderr.write('Error: The API key "' + str(apiId) + '" does not exists!\n')
            return False

        enabled = rows[0][0]

        if ( enabled == 0 ):
            sys.stderr.write('Error: The API key "' + str(apiId) + '" is still revoked!\n')
            return False

        sqlitewrapper.getInstance().cursor.execute(
            '''
            UPDATE API
            SET enabled = 0
            WHERE id = ?
            ''', [
            apiId,
        ])
        sqlitewrapper.getInstance().connection.commit()

    except:
        sys.stderr.write('Error: The API key could not be revoked!\n')
        sys.stderr.write('The database operation failed:\n\n')
        sys.stderr.write(traceback.format_exc())
        return False

    print('The API key has been revoked successfully.')
    return True


if ( __name__ == '__main__' ):

    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        sys.stderr.write('Error: You need to have root privileges!\n')
        sys.exit(1)

    ## Try to parse configuration file
    try:
        configurationFilePath = '/etc/ardukey-auth-server.conf'

        if ( os.access(configurationFilePath, os.R_OK) == False ):
            raise Exception('The configuration file "' + configurationFilePath + '" is not readable!')
        
        configurationInstance = configuration.getInstance()
        configurationInstance.setFilePath(configurationFilePath)

        databaseFilePath = configurationInstance.get('database_file')
        logFilePath = configurationInstance.get('log_file')
        serverAddress = configurationInstance.get('server_address')
        serverPort = configurationInstance.get('server_port')

    except:
        sys.stderr.write('Fatal error: The configuration file could not be read correctly:\n\n')
        sys.stderr.write(traceback.format_exc())
        sys.exit(1)

    ## Set database file path
    sqlitewrapper.getInstance().setFilePath(databaseFilePath)

    parser = argparse.ArgumentParser(add_help=True,
        description='ArduKey auth-server configuration tool ' + VERSION)

    parser.add_argument('-v', '--version',
        action='version',
        version='ArduKey auth-server configuration tool ' + VERSION,
        help='Print version and exit.'
    )

    ardukeyGroup = parser.add_argument_group('ArduKey management')
    apikeyGroup = parser.add_argument_group('API key management')

    ardukeyGroup.add_argument('--list-ardukeys',
        action='store_true',
        default=False,
        required=False,
        help='List all available ArduKeys.'
    )

    ardukeyGroup.add_argument('--add-ardukey',
        action='store',
        default=False,
        required=False,
        nargs=3,
        metavar=('PUBLICID', 'SECRETID', 'AESKEY'),
        help='Add a new ArduKey.'
    )

    ardukeyGroup.add_argument('--revoke-ardukey',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='PUBLICID',
        type=str,
        help='Revoke an ArduKey.'
    )

    ardukeyGroup.add_argument('--delete-ardukey',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='PUBLICID',
        type=str,
        help='Delete an ArduKey.'
    )

    apikeyGroup.add_argument('--list-apikeys',
        action='store_true',
        default=False,
        required=False,
        help='List all available API keys.'
    )

    apikeyGroup.add_argument('--generate-apikey',
        action='store_true',
        default=False,
        required=False,
        help='Generate a new API key.'
    )

    apikeyGroup.add_argument('--revoke-apikey',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='APIID',
        type=int,
        help='Revoke an API key.'
    )

    args = vars(parser.parse_args())

    if ( args['list_ardukeys'] ):
        listArduKeys()

    elif ( args['add_ardukey'] ):
        publicId = args['add_ardukey'][0]
        secretId = args['add_ardukey'][1]
        aesKey = args['add_ardukey'][2]
        addArduKey(publicId, secretId, aesKey)

    elif ( args['revoke_ardukey'] ):
        publicId = args['revoke_ardukey'][0]
        revokeArduKey(publicId)

    elif ( args['delete_ardukey'] ):
        publicId = args['delete_ardukey'][0]
        deleteArduKey(publicId)

    elif ( args['list_apikeys'] ):
        listAPIKeys()

    elif ( args['generate_apikey'] ):
        generateAPIKey()

    elif ( args['revoke_apikey'] ):
        apiId = args['revoke_apikey'][0]
        revokeAPIKey(apiId)

    else:
        parser.print_help()
