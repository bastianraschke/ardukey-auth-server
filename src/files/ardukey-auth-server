#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ArduKey authserver

Copyright 2015 Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import http.server
import urllib.parse
import json
import logging
import sys
import traceback

from ardukeyauth import __version__ as VERSION
from ardukeyauth.configreader import ConfigReader
from ardukeyauth.otpverificationrequest import OTPVerificationRequest
from ardukeyauth.otpverification import OTPVerification


class ArduKeyAuthserver(http.server.BaseHTTPRequestHandler):
    """
    Implementation of BaseHTTPRequestHandler.

    @attribute string server_version
    The server version string.

    @attribute string sys_version
    The Python version string.
    """

    server_version = 'ArduKey authserver/' + VERSION

    ## Hide the sys_version attribute
    sys_version = ''

    def log_message(self, format, *args):
        """
        Log an arbitrary message (@see BaseHTTPRequestHandler).

        """

        ## Do not output anything
        pass

    def send_output(self, message):
        """
        Send a given message to client.

        @param string message
        The message to send to client.

        @return void
        """

        self.wfile.write(message.encode('utf-8'))

    def do_GET(self):
        """
        Handle the HTTP GET requests.

        @return void
        """

        ## Workaround for unfunctional exception catching in method
        ## httpServer.serve_forever(). It seems the method does not throw
        ## occuring exceptions but handle them itself. The KeyboardInterrupt
        ## exception seems to be an isolated case.
        try:
            url = urllib.parse.urlparse(self.path, 'http')

            ## Default request path
            if (url.path == '/ardukeyotp/1.0/verify'):

                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()

                verification = OTPVerification(OTPVerificationRequest(url.query))
                verificationResponse = verification.getResponse();

                ## Send JSON formatted response
                output = json.dumps(verificationResponse, indent='\t', sort_keys=True)
                self.send_output(output)

            ## Fallback message
            else:
                self.send_response(200)
                self.send_header('Content-Type', 'text/html')
                self.end_headers()

                self.send_output('<!DOCTYPE html>')
                self.send_output('<html><head><title>' + self.server_version + '</title></head><body>')
                self.send_output('<h1>' + self.server_version + '</h1>')
                self.send_output("<p>Please send your GET requests to: <pre>/ardukeyotp/1.0/verify</pre>")
                self.send_output('</body></html>')

        ## General unexpected server request errors:
        except:
            logging.getLogger().error('Unexpected server error occured during request:', exc_info=1)

if ( __name__ == '__main__' ):

    ## Try to parse configuration file
    try:
        configReader = ConfigReader()

        logFilePath = configReader.get('log_file')
        serverAddress = configReader.get('server_address')
        serverPort = configReader.get('server_port')

    except:
        sys.stderr.write('Fatal error: The configuration file could not be read correctly:\n\n')
        sys.stderr.write(traceback.format_exc())
        sys.exit(1)

    ## Try to initialize logger
    try:
        logger = logging.getLogger()

        ## Enable debug logging if "--debug" flag is given
        if ( '--debug' in sys.argv ):
            loggingLevel = logging.DEBUG
        else:
            loggingLevel = logging.INFO

        logger.setLevel(loggingLevel)

        logFormatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

        ## Stream output handler
        strmHandler = logging.StreamHandler()
        strmHandler.setLevel(loggingLevel)
        strmHandler.setFormatter(logFormatter)
        logger.addHandler(strmHandler)

        ## Logging file handler
        fileHandler = logging.FileHandler(logFilePath)
        fileHandler.setLevel(loggingLevel)
        fileHandler.setFormatter(logFormatter)
        logger.addHandler(fileHandler)

    except:
        sys.stderr.write('Error: The logger could not be initialized correctly!\n\n')
        sys.stderr.write(traceback.format_exc())

    ## Try to start HTTP server
    try:
        httpServer = http.server.HTTPServer(
            (serverAddress, int(serverPort)),
            ArduKeyAuthserver
        )

        logger.info('Starting ' + ArduKeyAuthserver.server_version + ': ' +
            'Listening on ' + serverAddress + ':' + serverPort)

    except:
        sys.stderr.write('Fatal error: The server could not be started!\n\n')
        sys.stderr.write(traceback.format_exc())
        sys.exit(1)

    ## Try to start serving and never return back
    try:
        httpServer.serve_forever()

    except KeyboardInterrupt:
        logger.info('KeyboardInterrupt received...')

    except:
        logger.error('Unexpected server error occured during serving:', exc_info=1)

    finally:
        logger.info('Shutting down ArduKey authserver.')
        httpServer.socket.close()
