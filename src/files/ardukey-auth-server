#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ArduKey auth server

Copyright 2015 Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import http.server
import urllib.parse
import json
import logging
import os
import sys
import traceback
import argparse

import ardukeyauth.configuration as configuration
import ardukeyauth.sqlitewrapper as sqlitewrapper

from ardukeyauth import __version__ as VERSION
from ardukeyauth.otpverificationrequest import OTPVerificationRequest
from ardukeyauth.otpverification import OTPVerification


class ArduKeyAuthserver(http.server.BaseHTTPRequestHandler):
    """
    Implementation of BaseHTTPRequestHandler.

    @attribute str server_version
    The server version string.

    @attribute str sys_version
    The Python version string.
    """

    server_version = 'ArduKey auth server/' + VERSION

    ## Hide the sys_version attribute
    sys_version = ''

    def log_message(self, format, *args):
        """
        Log an arbitrary message (@see BaseHTTPRequestHandler).

        """

        ## Do not output anything
        pass

    def send_output(self, message):
        """
        Send a given message to client.

        @param str message
        The message to send to client.

        @return void
        """

        self.wfile.write(message.encode('utf-8'))

    def do_GET(self):
        """
        Handle the HTTP GET requests.

        @return void
        """

        ## Workaround for unfunctional exception catching in method
        ## httpServer.serve_forever(). It seems the method does not throw
        ## occuring exceptions but handle them itself. The KeyboardInterrupt
        ## exception seems to be an isolated case.
        try:
            url = urllib.parse.urlparse(self.path, 'http')

            ## Default request path
            if (url.path == '/ardukeyotp/1.0/verify'):

                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()

                verification = OTPVerification(OTPVerificationRequest(url.query))
                verificationResponse = verification.getResponse();

                ## Send JSON formatted response
                output = json.dumps(verificationResponse, indent='\t', sort_keys=True)
                self.send_output(output)

            ## Fallback message
            else:
                self.send_response(200)
                self.send_header('Content-Type', 'text/html')
                self.end_headers()

                self.send_output('<!DOCTYPE html>')
                self.send_output('<html><head><title>' + self.server_version + '</title></head><body>')
                self.send_output('<h1>' + self.server_version + '</h1>')
                self.send_output("<p>Please send your GET requests to: <pre>/ardukeyotp/1.0/verify</pre>")
                self.send_output('</body></html>')

        ## General unexpected server request errors:
        except:
            logging.getLogger().error('Unexpected server error occured during request:', exc_info=1)

if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument('--debug',
        action='store_true',
        default=False,
        required=False,
        help='Enables dubugging mode.'
    )

    parser.add_argument('--config',
        action='store',
        default=False,
        required=False,
        nargs=1,
        metavar='PATH',
        type=str,
        help='Custom path to configuration file.'
    )

    args, unknownArgs = parser.parse_known_args()
    args = vars(args)

    ## Try to parse configuration file
    try:
        ## Check if custom configuration file path is given
        if ( type(args['config']) == list ):
            configurationFilePath = args['config'][0]
        else:
            configurationFilePath = '/etc/ardukey-auth-server.conf'

        if ( os.access(configurationFilePath, os.R_OK) == False ):
            raise Exception('The configuration file "' + configurationFilePath + '" is not readable!')

        configurationInstance = configuration.getInstance()
        configurationInstance.setFilePath(configurationFilePath)

        databaseFilePath = configurationInstance.get('database_file')
        logFilePath = configurationInstance.get('log_file')
        serverAddress = configurationInstance.get('server_address')
        serverPort = configurationInstance.get('server_port')

    except:
        sys.stderr.write('Fatal error: The configuration file could not be read correctly:\n\n')
        sys.stderr.write(traceback.format_exc())
        sys.exit(1)

    ## Set database file path
    sqlitewrapper.getInstance().setFilePath(databaseFilePath)

    ## Try to initialize logger
    try:
        ## Enable debug logging if "--debug" flag is given
        if ( args['debug'] == True ):
            loggingLevel = logging.DEBUG
        else:
            loggingLevel = logging.INFO

        logging.getLogger().setLevel(loggingLevel)

        logFormatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

        ## Stream output handler
        strmHandler = logging.StreamHandler()
        strmHandler.setLevel(loggingLevel)
        strmHandler.setFormatter(logFormatter)
        logging.getLogger().addHandler(strmHandler)

        ## Logging file handler
        fileHandler = logging.FileHandler(logFilePath)
        fileHandler.setLevel(loggingLevel)
        fileHandler.setFormatter(logFormatter)
        logging.getLogger().addHandler(fileHandler)

    except:
        sys.stderr.write('Error: The logger could not be initialized correctly!\n\n')
        sys.stderr.write(traceback.format_exc())

    ## Try to start HTTP server
    try:
        httpServer = http.server.HTTPServer(
            (serverAddress, int(serverPort)),
            ArduKeyAuthserver
        )

        logging.getLogger().info('Starting ' + ArduKeyAuthserver.server_version + ': ' +
            'Listening on ' + serverAddress + ':' + serverPort)

    except:
        sys.stderr.write('Fatal error: The server could not be started!\n\n')
        sys.stderr.write(traceback.format_exc())
        sys.exit(1)

    ## Try to start serving and never return back
    try:
        httpServer.serve_forever()

    except KeyboardInterrupt:
        logging.getLogger().info('KeyboardInterrupt received...')

    except:
        logging.getLogger().error('Unexpected server error occured during serving:', exc_info=1)

    finally:
        logging.getLogger().info('Shutting down ArduKey auth server.')
        httpServer.socket.close()
