#!/bin/sh
### BEGIN INIT INFO
# Provides:          ardukey-auth-server
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ArduKey authentication server.
# Description:       ArduKey authentication server.
### END INIT INFO

# Author: Bastian Raschke <bastian.raschke@posteo.de>
#

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="ArduKey authentication server"
NAME="ardukey-auth-server"
DAEMON="/usr/sbin/${NAME}"
DAEMON_ARGS=""
PIDFILE="/var/run/${NAME}.pid"
SCRIPTNAME="/etc/init.d/${NAME}"
RUNASUSER="ardukey-auth"
PROCESS_EXECUTABLE="/usr/bin/python3"

# Exit if the package is not installed
[ -x "${DAEMON}" ] || exit 0

# Read configuration variable file if it is present
[ -r "/etc/default/${NAME}" ] && . "/etc/default/${NAME}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions
. /lib/lsb/init-functions


# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

    # Note: Cause of the daemon is interpreted by Python,
    # we have to assign the interpreter executable (in this case python3)!
    start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
        --exec "${PROCESS_EXECUTABLE}" \
        --chuid "${RUNASUSER}" \
        --test > /dev/null \
    || return 1

    # --make-pidfile: Create PID file (the daemon does not)
    # --background: Fork own daemon process
    start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
        --exec "${DAEMON}" \
        --chuid "${RUNASUSER}" \
        --make-pidfile --background \
        -- "${DAEMON_ARGS}" \
    || return 2
}

# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    # Note: Cause of the daemon is interpreted by Python,
    # we have to assign the interpreter executable (in this case python3)!
    start-stop-daemon --stop --quiet --pidfile "${PIDFILE}" \
        --exec "${PROCESS_EXECUTABLE}" \
        --retry=TERM/30/KILL/5
    RETVAL="${?}"

    # Return here, if daemon could not be stopped
    [ "${RETVAL}" = 2 ] && return 2

    # Delete PID file
    rm -f "${PIDFILE}"

    # Sleep a bit for sure
    sleep 1

    # Return other return codes
    return "${RETVAL}"
}


case "${1}" in

    start)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Starting ${DESC}" "${NAME}"
        do_start
        case "${?}" in
            0|1) [ "${VERBOSE}" != no ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != no ] && log_end_msg 1 ;;
        esac
    ;;

    stop)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Stopping ${DESC}" "${NAME}"
        do_stop
        case "${?}" in
            0|1) [ "${VERBOSE}" != no ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != no ] && log_end_msg 1 ;;
        esac
    ;;

    status)
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}" \
        && exit 0 || exit "${?}"
    ;;

    restart|force-reload)
        log_daemon_msg "Restarting ${DESC}" "${NAME}"
        do_stop
        case "${?}" in
            0|1)
                do_start
                case "${?}" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
            ;;
            *)
                # Failed to stop
                log_end_msg 1
            ;;
        esac
    ;;

    *)
        echo "Usage: ${SCRIPTNAME} {start|stop|status|restart|force-reload}" >&2
        exit 3
    ;;

esac

# Exit with exit status of last executed command
:
